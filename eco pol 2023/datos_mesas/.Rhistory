mapview_facet(x = mapa_votos, f = "agrupacion_nombre")
mapview_facet(x = mapa_votos, f = "agrupacion_nombre")
View(mapa_votos)
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapa_votos
mapview_facet(x = mapa_votos, f = "agrupacion_nombre")
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "votos")
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(votos = sum(votos))
totales
votos = left_join(votos, totales)
votos
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
votos = left_join(votos, totales)
votos
votos$prop = votos$votos / votos$totales
# mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
# class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geometry")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
mapa_votos
mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geometry")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapa_votos
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
##########################################
library(tmap)
library(tmaptools)
tmap_mode("plot")
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_bubbles(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE)
ver
tmap_options(check.and.fix = TRUE)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_bubbles(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre")
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre")
ver
mapa_votos
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre")
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
tmap_save(ver, "mapa_generales_2023.png")
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
rm(list=ls())
######## Mapa por provincias
{
capa_provincial <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/provincias.gpkg")
GEN2023 <- import("GEN2023.csv", setclass =" data.table", encoding="UTF-8")
PASO2023 <- import("PASO2023.csv", setclass =" data.table", encoding="UTF-8")
#BALL2023 <- import("BALL2023.csv", setclass =" data.table", encoding="UTF-8")
}
class(GEN2023)
GEN2023 = data.frame(GEN2023)
library(tidyverse)
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
votos = left_join(votos, totales)
votos$prop = votos$votos / votos$totales
votos
totales
votos = left_join(votos, totales)
votos
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
class(mapa_votos)
mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
mapa_votos
class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geometry")
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geom")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_fill(title = "Elecciones Generales 2023") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3) +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2) +
tm_format(title = "Elecciones Generales 2023")
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3, title = "Elecciones Generales 2023") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3, title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3, title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('right', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('right', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('center', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
totales
votos = left_join(votos, totales)
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
scales::label_percent()(votos$prop)
votos$prop <- scales::label_percent()(votos$prop)
votos
mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
mapa_votos
class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geom")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
legend.format =
title = 'Elecciones Generales 2023',
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('center', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
class(votos)
class(votos$prop)
class(votos$prop)
votos$prop <- as.numeric(votos$prop); class(votos$prop)
votos
rm(list=ls())
######## Mapa por provincias
{
capa_provincial <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/provincias.gpkg")
GEN2023 <- import("GEN2023.csv", setclass =" data.table", encoding="UTF-8")
PASO2023 <- import("PASO2023.csv", setclass =" data.table", encoding="UTF-8")
#BALL2023 <- import("BALL2023.csv", setclass =" data.table", encoding="UTF-8")
}
class(GEN2023)
GEN2023 = data.frame(GEN2023)
library(tidyverse)
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
totales
votos = left_join(votos, totales)
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
class(votos)
class(votos$prop)
votos$prop <- scales::label_percent()(as.numeric(votos$prop))
votos
class(votos$prop)
votos$prop <- as.numeric(votos$prop); class(votos$prop)
votos
rm(list=ls())
######## Mapa por provincias
{
capa_provincial <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/provincias.gpkg")
GEN2023 <- import("GEN2023.csv", setclass =" data.table", encoding="UTF-8")
PASO2023 <- import("PASO2023.csv", setclass =" data.table", encoding="UTF-8")
#BALL2023 <- import("BALL2023.csv", setclass =" data.table", encoding="UTF-8")
}
class(GEN2023)
GEN2023 = data.frame(GEN2023)
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
totales
votos = left_join(votos, totales)
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
class(votos)
class(votos$prop)
votos$prop <- scales::percent()(votos$prop)
votos$prop <- scales::percent(votos$prop)
votos
class(votos$prop)
votos$prop <- as.numeric(votos$prop); class(votos$prop)
votos
rm(list=ls())
######## Mapa por provincias
{
capa_provincial <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/provincias.gpkg")
GEN2023 <- import("GEN2023.csv", setclass =" data.table", encoding="UTF-8")
PASO2023 <- import("PASO2023.csv", setclass =" data.table", encoding="UTF-8")
#BALL2023 <- import("BALL2023.csv", setclass =" data.table", encoding="UTF-8")
}
class(GEN2023)
GEN2023 = data.frame(GEN2023)
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
totales
votos = left_join(votos, totales)
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
class(votos)
class(votos$prop)
votos$prop <- scales::percent(votos$prop)
votos
class(votos$prop)
votos$prop <- as.factor(votos$prop); class(votos$prop)
votos
class(votos$prop)
mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
mapa_votos
class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geom")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('center', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
rm(list=ls())
######## Mapa por provincias
{
capa_provincial <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/provincias.gpkg")
GEN2023 <- import("GEN2023.csv", setclass =" data.table", encoding="UTF-8")
PASO2023 <- import("PASO2023.csv", setclass =" data.table", encoding="UTF-8")
#BALL2023 <- import("BALL2023.csv", setclass =" data.table", encoding="UTF-8")
}
class(GEN2023)
GEN2023 = data.frame(GEN2023)
votos = GEN2023 %>%
group_by(distrito_nombre, agrupacion_nombre) %>%
summarise(votos = sum(votos))
votos
totales = GEN2023 %>%
group_by(distrito_nombre) %>%
summarise(totales = sum(votos))
totales
votos = left_join(votos, totales)
votos; rm(totales)
votos$prop = votos$votos / votos$totales
votos
votos$prop <- (votos$prop)*100
votos
votos
mapa_votos = left_join(votos, capa_provincial, by = "distrito_nombre")
mapa_votos
class(mapa_votos)
mapa_votos = st_as_sf(mapa_votos, sf_column_name = "geom")
mapa_votos$agrupacion_nombre = gsub("/", " ", mapa_votos$agrupacion_nombre)
class(votos$prop)
mapview_facet <- function(x,f, z) {
criteria=split(x,x[[f]])
nms = paste(deparse(substitute(x)), names(criteria), sep = "-")
for (i in 1:length(criteria)) {
map=mapview::mapview(criteria[[i]], layer.name = nms[i], z = z)
assign(paste0("map_",i), map)
}
set=list(map_1)
for (i in 2:length(criteria)) {set=append(set, get(paste0("map_",i)))}
leafsync::latticeView(set)
}
mapview_facet(x = mapa_votos, f = "agrupacion_nombre", z = "prop")
library(tmap)
library(tmaptools)
#tmap_mode("view")
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
mapa_votos = st_transform(mapa_votos, 22174)
ver <-   tm_shape(mapa_votos) +
tm_scale_bar(position = c("left", "bottom")) + tm_compass(position = c("right", "top"), size = 1) +
tm_polygons(size = 0.12, style = "jenks", n = 8, col = "prop", alpha = 0.7, border.lwd = 0.3,
title = "Porcentaje de Votos") +
tm_layout(legend.position = c("right", "center"),
legend.outside = TRUE,
title = 'Elecciones Generales 2023',
title.position = c('center', 'top')) +
tm_facets(by = "agrupacion_nombre", ncol = 3, nrow = 2)
ver
tmap_save(ver, "mapa_generales_2023.png")
rm(list=ls())
dptos <- st_read("~/Code/Political_Economy/eco pol 2023/datos_mesas/IGN/departamento.shp"); names(dptos)
seccion <- import("seccion.csv", setclass = "data.table", encoding = "UTF-8"); names(seccion)
table(dptos$nam)
table(seccion$nombre)
head(table(dptos$nam))
head(table(seccion$nombre))
dptos <- rename(dptos, nombre = nam); names(dptos)
names(seccion)
dptos$nombre == seccion$nombre
identical(dptos$nombre, seccion$nombre)
dptos$nombre == seccion$nombre
comparedf(dptos, seccion)
arsenal::comparedf(dptos, seccion)
names(seccion)
names(dptos)
head(seccion)
head(dptos)
table(seccion$seccion_id)
table(distrito_id)
table(seccion$distrito_id)
table(dptos$gid)
capa_departamental <- left_join(dptos, seccion, by = "nombre")
names(capa_departamental)
na <- is.na(capa_departamental)
sum(na) # Genera NA por =/= nombres
capa_departamental$nombre
table(capa_departamental$nombre)
View(capa_departamental)
table(capa_departamental$geometry)
